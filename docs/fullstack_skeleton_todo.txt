FULLSTACK APPLICATION SKELETON

Some steps to create a fullstack web application skeleton with:
- Backend express server
- Frontend React development server
- Google Oauth flow (with passportjs)
- Integration with remotely hosted MongoDB
- Heroku deployment

Thanks to Stephen Grider for the excellent course
"Node with React: Fullstack Web Development"
https://www.udemy.com/node-with-react-fullstack-web-development/
These steps are copied from the course lectures with maybe just
a little bit of rearranging some stuff.

Necessary steps to achieve the good start for our own project:

1. Init Git

2. Creating project and first dependencies

mkdir server
cd server
npm init

npm install --save express

- Coding dummy-express server

3. Heroku deployment

- Dynamic port binding
- Specify Node Environment
- Specify start script
- Add server .gitignore file

Setting up new Heroku app
- Install Heroku CLI
- heroku login
- heroku create
- add heroku remote

https://afternoon-escarpment-67756.herokuapp.com
https://git.heroku.com/afternoon-escarpment-67756.git


3. Google+ API credentials for BOTH development and production use
Authorized JavaScript origins
Authorized redirect URIs

4. Handling first credentials
- Add server/config/ with necessary key-files
- Add Oauth-keys to Heroku env variables

5. Add nodemon
npm install --save nodemon

6. Passport and oauth stuff (backend)
npm install --save passport passport-google-oauth20
- Initial steps for oauth routes, services

7. MongoDB setup
Setup db for development in mlab.com
Setup db for production in mlab.com
- Set users
- Get credentials

Save credentials to keys and Heroku env variables
Add serializeUser and deserializeUser

npm install --save mongoose

-> Connecting to db, adding user when authenticating

8. Cookies

npm install --save cookie-session

- Add cookie key to keys and Heroku env variables

- Integrate passport with cookie-session

- Fix Heroku proxy issue in GoogleStrategy!

9. Bringing in the frontend!

npm install -g create-react-app (GLOBALLY)

create-react-app client

-> We have two servers in development mode!

- Set starting scripts in serverside package.json

npm install --save concurrently

- Add concurrent script for starting both servers

- Add proxy-settings to frontend package.json

- Be sure to add port 3000 as authorized callback in google

ARCHITECTURE DECISION: SINGLE SERVER for api and frontend resources
(Easier to handle cookies and other stuff...)
(IN PRODUCTION MODE, two servers in development) 

10. Building front skeleton

IN CLIENT SIDE:
npm install --save redux react-redux react-router-dom
npm install --save axios
npm install --save redux-thunk

- Building needed components, reducers and actions for oauth flow
- Adding logout redirection and auth callback redirection in serverside

11. More Deployment stuff:
-React + Express Routing in Production
-HOW TO BUILD FRONTEND PRODUCTION ASSETS FOR PRODUCTION?
(Section 9 in course)

DECISION: We choose option #2 (lecture 110):
Heroku installs all dependencies and build the whole client project
(We DON'T commit built assets to git!)

- Adding "default" routes to index.js serverside to return assets and index.html
- Adding heroku-postbuild -> install deps -> npm run build


DONE!!!
